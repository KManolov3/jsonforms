import { TestBed } from '@angular/core/testing';
import { JsonFormsAngularService } from '@jsonforms/angular';
export const baseSetup = (testConfig) => {
    beforeEach(() => {
        TestBed.configureTestingModule({
            declarations: [testConfig.componentUT],
            imports: testConfig.imports,
            providers: [JsonFormsAngularService].concat(testConfig.providers),
        }).compileComponents();
    });
};
export const getJsonFormsService = (component) => {
    return component.jsonFormsService;
};
export const setupMockStore = (fixture, testData) => {
    const component = fixture.componentInstance;
    component.uischema = testData.uischema;
    component.schema = testData.schema;
    getJsonFormsService(component).init({
        core: {
            data: testData.data,
            schema: testData.schema,
            errors: testData.errors,
            uischema: testData.uischema,
        },
    });
    getJsonFormsService(component).registerRenderers(testData.renderers);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWJyYXJ5L3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUJBLE9BQU8sRUFBb0IsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFvQixNQUFNLG9CQUFvQixDQUFDO0FBbUIvRSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsVUFBeUIsRUFDekIsRUFBRTtJQUNGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsWUFBWSxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQztZQUN0QyxPQUFPLEVBQUUsVUFBVSxDQUFDLE9BQU87WUFDM0IsU0FBUyxFQUFFLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztTQUNsRSxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQ2pDLFNBQTJCLEVBQ0YsRUFBRTtJQUMzQixPQUFRLFNBQWlCLENBQUMsZ0JBQTJDLENBQUM7QUFDeEUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQzVCLE9BQThCLEVBQzlCLFFBQW1DLEVBQzdCLEVBQUU7SUFDUixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7SUFDNUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQ3ZDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUVuQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbEMsSUFBSSxFQUFFO1lBQ0osSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJO1lBQ25CLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTTtZQUN2QixNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU07WUFDdkIsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRO1NBQzVCO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIFRoZSBNSVQgTGljZW5zZVxuICBcbiAgQ29weXJpZ2h0IChjKSAyMDE3LTIwMTkgRWNsaXBzZVNvdXJjZSBNdW5pY2hcbiAgaHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2Vzb3VyY2UvanNvbmZvcm1zXG4gIFxuICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICBcbiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAgYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gIFxuICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gIFRIRSBTT0ZUV0FSRS5cbiovXG5pbXBvcnQgdHlwZSB7IFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSnNvbkZvcm1zQW5ndWxhclNlcnZpY2UsIEpzb25Gb3Jtc0NvbnRyb2wgfSBmcm9tICdAanNvbmZvcm1zL2FuZ3VsYXInO1xuaW1wb3J0IHR5cGUge1xuICBKc29uRm9ybXNSZW5kZXJlclJlZ2lzdHJ5RW50cnksXG4gIEpzb25TY2hlbWEsXG4gIFVJU2NoZW1hRWxlbWVudCxcbn0gZnJvbSAnQGpzb25mb3Jtcy9jb3JlJztcbmltcG9ydCB0eXBlIHsgRXJyb3JPYmplY3QgfSBmcm9tICdhanYnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yVGVzdEV4cGVjdGF0aW9uIHtcbiAgZXJyb3JJbnN0YW5jZTogVHlwZTxhbnk+O1xuICBudW1iZXJPZkVsZW1lbnRzOiBudW1iZXI7XG4gIGluZGV4T2ZFbGVtZW50OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIFRlc3RDb25maWc8QyBleHRlbmRzIEpzb25Gb3Jtc0NvbnRyb2w+IHtcbiAgaW1wb3J0czogYW55W107XG4gIHByb3ZpZGVyczogYW55W107XG4gIGNvbXBvbmVudFVUOiBUeXBlPEM+O1xufVxuXG5leHBvcnQgY29uc3QgYmFzZVNldHVwID0gPEMgZXh0ZW5kcyBKc29uRm9ybXNDb250cm9sPihcbiAgdGVzdENvbmZpZzogVGVzdENvbmZpZzxDPlxuKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICBkZWNsYXJhdGlvbnM6IFt0ZXN0Q29uZmlnLmNvbXBvbmVudFVUXSxcbiAgICAgIGltcG9ydHM6IHRlc3RDb25maWcuaW1wb3J0cyxcbiAgICAgIHByb3ZpZGVyczogW0pzb25Gb3Jtc0FuZ3VsYXJTZXJ2aWNlXS5jb25jYXQodGVzdENvbmZpZy5wcm92aWRlcnMpLFxuICAgIH0pLmNvbXBpbGVDb21wb25lbnRzKCk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBUZXN0RGF0YTxUIGV4dGVuZHMgVUlTY2hlbWFFbGVtZW50PiB7XG4gIGRhdGE6IGFueTtcbiAgc2NoZW1hOiBKc29uU2NoZW1hO1xuICB1aXNjaGVtYTogVDtcbiAgZXJyb3JzPzogRXJyb3JPYmplY3RbXTtcbiAgcmVuZGVyZXJzPzogSnNvbkZvcm1zUmVuZGVyZXJSZWdpc3RyeUVudHJ5W107XG59XG5cbmV4cG9ydCBjb25zdCBnZXRKc29uRm9ybXNTZXJ2aWNlID0gKFxuICBjb21wb25lbnQ6IEpzb25Gb3Jtc0NvbnRyb2xcbik6IEpzb25Gb3Jtc0FuZ3VsYXJTZXJ2aWNlID0+IHtcbiAgcmV0dXJuIChjb21wb25lbnQgYXMgYW55KS5qc29uRm9ybXNTZXJ2aWNlIGFzIEpzb25Gb3Jtc0FuZ3VsYXJTZXJ2aWNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldHVwTW9ja1N0b3JlID0gKFxuICBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPGFueT4sXG4gIHRlc3REYXRhOiBUZXN0RGF0YTxVSVNjaGVtYUVsZW1lbnQ+XG4pOiB2b2lkID0+IHtcbiAgY29uc3QgY29tcG9uZW50ID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgY29tcG9uZW50LnVpc2NoZW1hID0gdGVzdERhdGEudWlzY2hlbWE7XG4gIGNvbXBvbmVudC5zY2hlbWEgPSB0ZXN0RGF0YS5zY2hlbWE7XG5cbiAgZ2V0SnNvbkZvcm1zU2VydmljZShjb21wb25lbnQpLmluaXQoe1xuICAgIGNvcmU6IHtcbiAgICAgIGRhdGE6IHRlc3REYXRhLmRhdGEsXG4gICAgICBzY2hlbWE6IHRlc3REYXRhLnNjaGVtYSxcbiAgICAgIGVycm9yczogdGVzdERhdGEuZXJyb3JzLFxuICAgICAgdWlzY2hlbWE6IHRlc3REYXRhLnVpc2NoZW1hLFxuICAgIH0sXG4gIH0pO1xuICBnZXRKc29uRm9ybXNTZXJ2aWNlKGNvbXBvbmVudCkucmVnaXN0ZXJSZW5kZXJlcnModGVzdERhdGEucmVuZGVyZXJzKTtcbn07XG4iXX0=