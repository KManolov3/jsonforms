import { TestBed } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { Actions } from '@jsonforms/core';
import { baseSetup, getJsonFormsService, setupMockStore, } from './util';
export const prepareComponent = (testConfig, instance, elementToUse) => {
    const fixture = TestBed.createComponent(testConfig.componentUT);
    const component = fixture.componentInstance;
    const result = { fixture, component };
    if (instance && elementToUse) {
        const numberElement = fixture.debugElement.query(By.css(instance));
        const numberNativeElement = elementToUse(numberElement);
        result.numberElement = numberElement;
        result.numberNativeElement = numberNativeElement;
    }
    return result;
};
const defaultData = { foo: 123.123 };
const defaultSchema = {
    type: 'object',
    properties: {
        foo: {
            type: 'number',
        },
    },
};
const defaultUischema = {
    type: 'Control',
    scope: '#/properties/foo',
};
export const defaultNumberTestData = {
    data: defaultData,
    schema: defaultSchema,
    uischema: defaultUischema,
};
export const updateWithSiblingNumberValue = (fixture, testData, expectations) => {
    setupMockStore(fixture, testData);
    getJsonFormsService(fixture.componentInstance).init({
        core: {
            data: { foo: 123.123, bar: 456.456 },
            schema: testData.schema,
            uischema: undefined,
        },
    });
    fixture.componentInstance.ngOnInit();
    fixture.detectChanges();
    expectations();
};
export const numberBaseTest = (testConfig, instance, elementToUse, testData = defaultNumberTestData) => () => {
    let fixture;
    let numberElement;
    let numberNativeElement;
    let component;
    baseSetup(testConfig);
    beforeEach(() => {
        const preparedComponents = prepareComponent(testConfig, instance, elementToUse);
        fixture = preparedComponents.fixture;
        numberNativeElement = preparedComponents.numberNativeElement;
        numberElement = preparedComponents.numberElement;
        component = preparedComponents.component;
    });
    it('should render floats', () => {
        component.uischema = testData.uischema;
        getJsonFormsService(component).init({ core: testData });
        getJsonFormsService(component).updateCore(Actions.init(testData.data, testData.schema));
        component.ngOnInit();
        fixture.detectChanges();
        expect(component.data).toBe(123.123);
        expect(numberNativeElement.value).toBe('123.123');
        // step is of type string
        expect(numberNativeElement.step).toBe('0.1');
        expect(numberNativeElement.disabled).toBe(false);
        // the component is wrapped in a div
        expect(fixture.nativeElement.children[0].style.display).not.toBe('none');
    });
    it('should render integers', () => {
        const state = {
            data: { foo: 123 },
            schema: {
                type: 'object',
                properties: {
                    foo: { type: 'integer' },
                },
            },
            uischema: testData.uischema,
        };
        component.uischema = testData.uischema;
        getJsonFormsService(component).init({ core: state });
        getJsonFormsService(component).updateCore(Actions.init(state.data, state.schema));
        component.ngOnInit();
        fixture.detectChanges();
        expect(component.data).toBe(123);
        expect(numberNativeElement.value).toBe('123');
        // step is of type string
        expect(numberNativeElement.step).toBe('1');
        expect(numberNativeElement.disabled).toBe(false);
        // the component is wrapped in a div
        expect(fixture.nativeElement.children[0].style.display).not.toBe('none');
    });
    it('should support updating the state', () => {
        component.uischema = testData.uischema;
        getJsonFormsService(component).init({ core: testData });
        getJsonFormsService(component).updateCore(Actions.init(testData.data, testData.schema));
        component.ngOnInit();
        fixture.detectChanges();
        getJsonFormsService(fixture.componentInstance).updateCore(Actions.update('foo', () => 456.456));
        fixture.detectChanges();
        expect(component.data).toBe(456.456);
        expect(Number(numberNativeElement.value)).toBe(456.456);
    });
    it('should update with undefined value', () => {
        component.uischema = testData.uischema;
        getJsonFormsService(component).init({ core: testData });
        getJsonFormsService(component).updateCore(Actions.init(testData.data, testData.schema));
        component.ngOnInit();
        fixture.detectChanges();
        getJsonFormsService(fixture.componentInstance).updateCore(Actions.update('foo', () => undefined));
        fixture.detectChanges();
        expect(component.data).toBe(undefined);
        expect(numberNativeElement.value).toBe('');
    });
    it('should update with null value', () => {
        component.uischema = testData.uischema;
        getJsonFormsService(component).init({ core: testData });
        getJsonFormsService(component).updateCore(Actions.init(testData.data, testData.schema));
        component.ngOnInit();
        fixture.detectChanges();
        getJsonFormsService(fixture.componentInstance).updateCore(Actions.update('foo', () => null));
        fixture.detectChanges();
        expect(component.data).toBe(null);
        expect(numberNativeElement.value).toBe('');
    });
    it('should not update with wrong ref', () => {
        component.uischema = testData.uischema;
        getJsonFormsService(component).init({ core: testData });
        getJsonFormsService(component).updateCore(Actions.init(testData.data, testData.schema));
        component.ngOnInit();
        fixture.detectChanges();
        getJsonFormsService(fixture.componentInstance).updateCore(Actions.update('bar', () => 456.456));
        fixture.detectChanges();
        expect(component.data).toBe(123.123);
        expect(Number(numberNativeElement.value)).toBe(123.123);
    });
    // store needed as we evaluate the calculated enabled value to disable/enable the control
    it('can be disabled', () => {
        component.uischema = testData.uischema;
        component.disabled = true;
        getJsonFormsService(component).init({
            core: {
                data: testData.data,
                schema: testData.schema,
                uischema: testData.uischema,
            },
        });
        component.ngOnInit();
        fixture.detectChanges();
        expect(numberNativeElement.disabled).toBe(true);
    });
    // store needed as we evaluate the calculated enabled value to disable/enable the control
    it('can be hidden', () => {
        component.uischema = testData.uischema;
        component.visible = false;
        getJsonFormsService(component).init({
            core: {
                data: testData.data,
                schema: testData.schema,
                uischema: testData.uischema,
            },
        });
        component.ngOnInit();
        fixture.detectChanges();
        const hasDisplayNone = 'none' === fixture.nativeElement.children[0].style.display;
        const hasHidden = fixture.nativeElement.children[0].hidden;
        expect(hasDisplayNone || hasHidden).toBeTruthy();
    });
    it('id should be present in output', () => {
        component.uischema = testData.uischema;
        component.id = 'myId';
        getJsonFormsService(component).init({
            core: {
                data: testData.data,
                schema: testData.schema,
                uischema: testData.uischema,
            },
        });
        component.ngOnInit();
        fixture.detectChanges();
        expect(numberElement.nativeElement.id).toBe('myId');
    });
};
export const numberInputEventTest = (testConfig, instance, elementToUse, testData = defaultNumberTestData) => () => {
    let fixture;
    let numberNativeElement;
    let component;
    baseSetup(testConfig);
    beforeEach(() => {
        const preparedComponents = prepareComponent(testConfig, instance, elementToUse);
        fixture = preparedComponents.fixture;
        numberNativeElement = preparedComponents.numberNativeElement;
        component = preparedComponents.component;
    });
    it('should update via input event', () => {
        component.uischema = testData.uischema;
        getJsonFormsService(component).init({
            core: {
                data: testData.data,
                schema: testData.schema,
                uischema: undefined,
            },
        });
        fixture.detectChanges();
        component.ngOnInit();
        const spy = spyOn(component, 'onChange');
        numberNativeElement.value = 456.456;
        if (numberNativeElement.dispatchEvent) {
            numberNativeElement.dispatchEvent(new Event('input'));
        }
        // trigger change detection
        fixture.detectChanges();
        expect(spy).toHaveBeenCalled();
        expect(Number(numberNativeElement.value)).toBe(456.456);
    });
};
export const numberErrorTest = (testConfig, errorTestInformation, testData = defaultNumberTestData) => () => {
    let fixture;
    let component;
    baseSetup(testConfig);
    beforeEach(() => {
        const preparedComponents = prepareComponent(testConfig);
        fixture = preparedComponents.fixture;
        component = preparedComponents.component;
    });
    it('should display errors', () => {
        component.uischema = testData.uischema;
        const formsService = getJsonFormsService(component);
        formsService.init({
            core: {
                data: testData.data,
                schema: testData.schema,
                uischema: undefined,
            },
        });
        formsService.updateCore(Actions.updateErrors([
            {
                instancePath: '/foo',
                message: 'Hi, this is me, test error!',
                keyword: '',
                schemaPath: '',
                params: {},
            },
        ]));
        formsService.refresh();
        component.ngOnInit();
        fixture.detectChanges();
        const debugErrors = fixture.debugElement.queryAll(By.directive(errorTestInformation.errorInstance));
        expect(debugErrors.length).toBe(errorTestInformation.numberOfElements);
        expect(debugErrors[errorTestInformation.indexOfElement].nativeElement
            .textContent).toBe('Hi, this is me, test error!');
    });
};
const additionalSchema = {
    type: 'object',
    properties: {
        foo: {
            type: 'number',
            minimum: -42.42,
            maximum: 42,
            multipleOf: 3,
        },
    },
};
export const additionalTestData = {
    data: defaultData,
    schema: additionalSchema,
    uischema: defaultUischema,
};
export const numberAdditionalPropsTest = (testConfig, instance, elementToUse, testData = additionalTestData) => () => {
    let fixture;
    let numberNativeElement;
    baseSetup(testConfig);
    beforeEach(() => {
        const preparedComponents = prepareComponent(testConfig, instance, elementToUse);
        fixture = preparedComponents.fixture;
        numberNativeElement = preparedComponents.numberNativeElement;
    });
    it('should respect min,max,multipleOf', () => {
        setupMockStore(fixture, testData);
        getJsonFormsService(fixture.componentInstance).updateCore(Actions.init(testData.data, testData.schema));
        fixture.componentInstance.ngOnInit();
        fixture.detectChanges();
        // step, min and max are of type string on an input control
        expect(numberNativeElement.step).toBe('3');
        expect(numberNativeElement.min).toBe('-42.42');
        expect(numberNativeElement.max).toBe('42');
    });
};
//# sourceMappingURL=data:application/json;base64,